#!/usr/bin/env python3
"""
Script para limpeza do projeto - Remove arquivos n√£o essenciais
Mant√©m apenas os arquivos necess√°rios para o funcionamento do sistema
"""

import os
import shutil
from pathlib import Path

def remove_file_safe(filepath):
    """Remove arquivo de forma segura"""
    try:
        if os.path.exists(filepath):
            os.remove(filepath)
            print(f"‚úÖ Removido: {filepath}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao remover {filepath}: {e}")
        return False

def remove_dir_safe(dirpath):
    """Remove diret√≥rio de forma segura"""
    try:
        if os.path.exists(dirpath):
            shutil.rmtree(dirpath)
            print(f"‚úÖ Removido diret√≥rio: {dirpath}")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao remover diret√≥rio {dirpath}: {e}")
        return False

def clean_project():
    """Limpar arquivos n√£o essenciais do projeto"""
    
    base_path = Path(__file__).parent
    
    print("üßπ INICIANDO LIMPEZA DO PROJETO")
    print("=" * 50)
    
    # Arquivos de teste e debug (n√£o essenciais)
    test_files = [
        "check_db.py",
        "cleanup_project.py", 
        "config.py",
        "config_new.py",
        "debug_govbr.py",
        "demo_optimizations.py",
        "final_report.py",
        "fix_imports.py",
        "quick_test.py",
        "run.py", 
        "test_advanced_optimizations.py",
        "test_auth.py",
        "test_automation.py",
        "test_modern_dialogs.py",
        "test_optimized_functions.py",
        "verify_project.py",
        "visual_config.py",
        "__init__.py"
    ]
    
    # Arquivos de documenta√ß√£o (n√£o essenciais para funcionamento)
    doc_files = [
        "CORRE√á√ïES_APLICADAS.md",
        "DIALOGS_MODERNOS_IMPLEMENTADO.md",
        "ERROS_FINALMENTE_CORRIGIDOS.md",
        "GUIA_MEU_INSS.md",
        "INTERFACE_MELHORADA.md", 
        "PROBLEMAS_CORRIGIDOS.md",
        "PROJETO_FINALIZADO.md",
        "SISTEMA_AUTENTICACAO.md",
        "SISTEMA_COMPLETO.md",
        "SISTEMA_PRONTO.md",
        "SOLUCAO_PROBLEMAS_MEU_INSS.md",
        "TUTORIAL_LOGIN.md",
        "TYPE_ERRORS_CORRIGIDOS.md",
        "VERIFICACAO_COMPLETA.md",
        "WARNINGS_CORRIGIDOS.md"
    ]
    
    # Arquivos batch (n√£o essenciais)
    batch_files = [
        "diagnostico.bat",
        "INICIAR_SISTEMA.bat",
        "RESET_CONTAS.bat",
        "start.bat"
    ]
    
    # Arquivos duplicados/n√£o utilizados
    duplicate_files = [
        "requirements_new.txt",
        "reset_account.py"  # Mant√©m apenas se for usado
    ]
    
    print("üìÅ Removendo arquivos de teste e debug...")
    for file in test_files:
        remove_file_safe(base_path / file)
    
    print("\\nüìö Removendo arquivos de documenta√ß√£o desnecess√°rios...")
    for file in doc_files:
        remove_file_safe(base_path / file)
        
    print("\\n‚öôÔ∏è Removendo arquivos batch...")
    for file in batch_files:
        remove_file_safe(base_path / file)
        
    print("\\nüîÑ Removendo arquivos duplicados...")
    for file in duplicate_files:
        remove_file_safe(base_path / file)
    
    # Limpar diret√≥rios n√£o essenciais
    print("\\nüìÇ Removendo diret√≥rios n√£o essenciais...")
    
    # Remove diret√≥rio docs (documenta√ß√£o)
    remove_dir_safe(base_path / "docs")
    
    # Remove diret√≥rio drivers se existir (selenium baixa automaticamente)
    remove_dir_safe(base_path / "drivers")
    
    # Remove cache Python
    print("\\nüóëÔ∏è Limpando cache Python...")
    remove_dir_safe(base_path / "__pycache__")
    remove_dir_safe(base_path / "src" / "__pycache__")
    remove_dir_safe(base_path / "src" / "auth" / "__pycache__")
    remove_dir_safe(base_path / "src" / "views" / "__pycache__")
    remove_dir_safe(base_path / "src" / "utils" / "__pycache__")
    remove_dir_safe(base_path / "src" / "controllers" / "__pycache__")
    remove_dir_safe(base_path / "src" / "models" / "__pycache__")
    
    # Limpar arquivos duplicados em src/views
    print("\\nüîÑ Removendo arquivos duplicados em src/views...")
    remove_file_safe(base_path / "src" / "views" / "fontes_integration_new.py")
    remove_file_safe(base_path / "src" / "views" / "fontes_interface_new.py")
    
    # Verificar se controllers e models est√£o sendo usados
    controllers_path = base_path / "src" / "controllers"
    models_path = base_path / "src" / "models"
    
    if controllers_path.exists():
        if not any(controllers_path.iterdir()):
            print("üìÅ Removendo diret√≥rio controllers vazio...")
            remove_dir_safe(controllers_path)
    
    if models_path.exists():
        if not any(models_path.iterdir()):
            print("üìÅ Removendo diret√≥rio models vazio...")
            remove_dir_safe(models_path)
    
    print("\\n" + "=" * 50)
    print("‚úÖ LIMPEZA CONCLU√çDA!")
    print("\\nüìã ARQUIVOS ESSENCIAIS MANTIDOS:")
    print("   ‚Ä¢ main.py (arquivo principal)")
    print("   ‚Ä¢ requirements.txt (depend√™ncias)")
    print("   ‚Ä¢ README.md (documenta√ß√£o principal)")
    print("   ‚Ä¢ ESTRUTURA_PROJETO.md (estrutura)")
    print("   ‚Ä¢ pyrightconfig.json (configura√ß√£o)")
    print("   ‚Ä¢ src/ (c√≥digo fonte)")
    print("   ‚Ä¢ database/ (banco de dados)")
    print("   ‚Ä¢ logs/ (sistema de logs)")
    print("   ‚Ä¢ .venv/ (ambiente virtual)")
    print("   ‚Ä¢ .vscode/ (configura√ß√µes VS Code)")
    print("   ‚Ä¢ .gitignore (controle de vers√£o)")

if __name__ == "__main__":
    clean_project()
