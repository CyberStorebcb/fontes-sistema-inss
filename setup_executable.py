#!/usr/bin/env python3
"""
Setup para criar execut√°vel do Sistema FONTES
Gera um arquivo .exe que pode ser distribu√≠do sem precisar do Python
"""
import os
import sys
import subprocess
import json
from pathlib import Path

class ExecutableBuilder:
    """Construtor de execut√°vel para o Sistema FONTES"""
    
    def __init__(self):
        self.project_dir = Path(__file__).parent
        self.dist_dir = self.project_dir / "dist"
        self.build_dir = self.project_dir / "build"
        
    def check_dependencies(self):
        """Verificar e instalar depend√™ncias necess√°rias"""
        print("üîç Verificando depend√™ncias...")
        
        required_packages = [
            "pyinstaller",
            "customtkinter", 
            "pillow",
            "requests"
        ]
        
        for package in required_packages:
            try:
                __import__(package.replace("-", "_"))
                print(f"‚úÖ {package} - OK")
            except ImportError:
                print(f"üì¶ Instalando {package}...")
                subprocess.check_call([sys.executable, "-m", "pip", "install", package])
                print(f"‚úÖ {package} - Instalado")
    
    def create_main_launcher(self):
        """Criar arquivo principal do execut√°vel"""
        launcher_content = '''#!/usr/bin/env python3
"""
Sistema FONTES v3.0 - Launcher Principal
Ponto de entrada para o execut√°vel
"""
import sys
import os
import tkinter as tk
from tkinter import messagebox
import customtkinter as ctk

# Configurar path para recursos empacotados
if getattr(sys, 'frozen', False):
    # Execut√°vel PyInstaller
    BASE_DIR = sys._MEIPASS
else:
    # Desenvolvimento
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# Adicionar diret√≥rios ao path
sys.path.insert(0, os.path.join(BASE_DIR, 'src'))

def main():
    """Fun√ß√£o principal do sistema"""
    try:
        print("üèõÔ∏è Iniciando Sistema FONTES v3.0...")
        
        # Configurar tema padr√£o
        ctk.set_appearance_mode("dark")
        ctk.set_default_color_theme("blue")
        
        # Verificar se h√° sess√£o salva
        session_file = os.path.join(BASE_DIR, "session.dat")
        has_session = os.path.exists(session_file)
        
        if has_session:
            print("üîë Sess√£o encontrada, carregando interface principal...")
            # Carregar interface principal diretamente
            from views.fontes_interface import FontesMainWindow
            app = FontesMainWindow()
            app.run()
        else:
            print("üö™ Carregando tela de login...")
            # Carregar tela de login
            from auth.login_clean import show_login_window
            
            def on_login_success(user_data):
                print(f"‚úÖ Login bem-sucedido: {user_data.get('full_name', 'Usu√°rio')}")
                # Carregar interface principal ap√≥s login
                from views.fontes_interface import FontesMainWindow
                app = FontesMainWindow()
                app.run()
            
            login_window = show_login_window(on_login_success)
            login_window.mainloop()
            
    except ImportError as e:
        messagebox.showerror(
            "Erro de M√≥dulo",
            f"Erro ao importar m√≥dulos necess√°rios:\\n{e}\\n\\n"
            "Verifique se todos os arquivos est√£o presentes."
        )
    except Exception as e:
        messagebox.showerror(
            "Erro Cr√≠tico", 
            f"Erro inesperado no sistema:\\n{e}\\n\\n"
            "Entre em contato com o suporte t√©cnico."
        )

if __name__ == "__main__":
    main()
'''
        
        with open(self.project_dir / "main_launcher.py", "w", encoding="utf-8") as f:
            f.write(launcher_content)
        
        print("‚úÖ Launcher principal criado")
    
    def create_spec_file(self):
        """Criar arquivo de especifica√ß√£o do PyInstaller"""
        spec_content = f'''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

# Coletar todos os arquivos Python do projeto
a = Analysis(
    ['main_launcher.py'],
    pathex=['{self.project_dir}'],
    binaries=[],
    datas=[
        ('src', 'src'),
        ('*.md', '.'),
        ('*.txt', '.'),
    ],
    hiddenimports=[
        'customtkinter',
        'PIL',
        'PIL._tkinter_finder',
        'sqlite3',
        'threading',
        'queue',
        'tkinter',
        'tkinter.ttk',
        'tkinter.messagebox',
        'tkinter.filedialog',
    ],
    hookspath=[],
    hooksconfig={{}},
    runtime_hooks=[],
    excludes=['matplotlib', 'numpy', 'pandas', 'scipy'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='FONTES_Sistema_INSS',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # Sem console para interface gr√°fica
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='assets/icon.ico' if os.path.exists('assets/icon.ico') else None,
    version='version_info.txt' if os.path.exists('version_info.txt') else None,
)
'''
        
        with open(self.project_dir / "fontes.spec", "w", encoding="utf-8") as f:
            f.write(spec_content)
        
        print("‚úÖ Arquivo de especifica√ß√£o criado")
    
    def create_version_info(self):
        """Criar informa√ß√µes de vers√£o para o execut√°vel"""
        version_info = '''# UTF-8
#
# Informa√ß√µes de vers√£o para FONTES_Sistema_INSS.exe
#
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=(3,0,0,0),
    prodvers=(3,0,0,0),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo(
      [
      StringTable(
        u'040904B0',
        [StringStruct(u'CompanyName', u'Sistema FONTES'),
        StringStruct(u'FileDescription', u'Sistema INSS - FONTES v3.0'),
        StringStruct(u'FileVersion', u'3.0.0.0'),
        StringStruct(u'InternalName', u'FONTES_Sistema_INSS'),
        StringStruct(u'LegalCopyright', u'¬© 2025 Sistema FONTES. Todos os direitos reservados.'),
        StringStruct(u'OriginalFilename', u'FONTES_Sistema_INSS.exe'),
        StringStruct(u'ProductName', u'Sistema FONTES - INSS'),
        StringStruct(u'ProductVersion', u'3.0.0.0')])
      ]),
    VarFileInfo([VarStruct(u'Translation', [1046, 1200])])
  ]
)
'''
        
        with open(self.project_dir / "version_info.txt", "w", encoding="utf-8") as f:
            f.write(version_info)
        
        print("‚úÖ Informa√ß√µes de vers√£o criadas")
    
    def create_installer_script(self):
        """Criar script de instala√ß√£o/distribui√ß√£o"""
        installer_content = '''@echo off
echo ========================================
echo  Sistema FONTES v3.0 - Instalador
echo ========================================
echo.

echo üì¶ Copiando arquivos...
if not exist "C:\\FONTES" mkdir "C:\\FONTES"
copy "FONTES_Sistema_INSS.exe" "C:\\FONTES\\"
copy "*.dll" "C:\\FONTES\\" 2>nul

echo üîó Criando atalho na √°rea de trabalho...
powershell "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%USERPROFILE%\\Desktop\\Sistema FONTES.lnk'); $Shortcut.TargetPath = 'C:\\FONTES\\FONTES_Sistema_INSS.exe'; $Shortcut.IconLocation = 'C:\\FONTES\\FONTES_Sistema_INSS.exe'; $Shortcut.Description = 'Sistema FONTES - INSS v3.0'; $Shortcut.Save()"

echo üìã Criando entrada no menu iniciar...
if not exist "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Sistema FONTES" mkdir "%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Sistema FONTES"
powershell "$WshShell = New-Object -comObject WScript.Shell; $Shortcut = $WshShell.CreateShortcut('%APPDATA%\\Microsoft\\Windows\\Start Menu\\Programs\\Sistema FONTES\\Sistema FONTES.lnk'); $Shortcut.TargetPath = 'C:\\FONTES\\FONTES_Sistema_INSS.exe'; $Shortcut.IconLocation = 'C:\\FONTES\\FONTES_Sistema_INSS.exe'; $Shortcut.Description = 'Sistema FONTES - INSS v3.0'; $Shortcut.Save()"

echo.
echo ‚úÖ Instala√ß√£o conclu√≠da!
echo üöÄ O Sistema FONTES foi instalado em C:\\FONTES
echo üñ•Ô∏è  Um atalho foi criado na √°rea de trabalho
echo üìã O programa est√° dispon√≠vel no menu iniciar
echo.
echo Pressione qualquer tecla para executar o sistema...
pause >nul
start "Sistema FONTES" "C:\\FONTES\\FONTES_Sistema_INSS.exe"
'''
        
        with open(self.project_dir / "installer.bat", "w", encoding="utf-8") as f:
            f.write(installer_content)
        
        print("‚úÖ Script de instala√ß√£o criado")
    
    def build_executable(self):
        """Construir o execut√°vel"""
        print("üî® Construindo execut√°vel...")
        
        # Limpar builds anteriores
        if self.dist_dir.exists():
            import shutil
            shutil.rmtree(self.dist_dir)
        if self.build_dir.exists():
            import shutil
            shutil.rmtree(self.build_dir)
        
        # Executar PyInstaller
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--onefile",
            "--windowed",
            "--clean",
            "--noconfirm",
            "fontes.spec"
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode == 0:
                print("‚úÖ Execut√°vel criado com sucesso!")
                return True
            else:
                print(f"‚ùå Erro ao criar execut√°vel:")
                print(result.stderr)
                return False
        except Exception as e:
            print(f"‚ùå Erro durante a constru√ß√£o: {e}")
            return False
    
    def create_distribution_package(self):
        """Criar pacote de distribui√ß√£o"""
        print("üì¶ Criando pacote de distribui√ß√£o...")
        
        dist_package_dir = self.project_dir / "FONTES_Distribuicao"
        dist_package_dir.mkdir(exist_ok=True)
        
        # Copiar execut√°vel
        exe_path = self.dist_dir / "FONTES_Sistema_INSS.exe"
        if exe_path.exists():
            import shutil
            shutil.copy2(exe_path, dist_package_dir / "FONTES_Sistema_INSS.exe")
        
        # Copiar instalador
        installer_path = self.project_dir / "installer.bat"
        if installer_path.exists():
            import shutil
            shutil.copy2(installer_path, dist_package_dir / "Instalar_Sistema_FONTES.bat")
        
        # Criar README para distribui√ß√£o
        readme_content = """# Sistema FONTES v3.0 - Pacote de Distribui√ß√£o

## üöÄ INSTRU√á√ïES DE INSTALA√á√ÉO

### OP√á√ÉO 1: Instala√ß√£o Autom√°tica (Recomendada)
1. Execute: `Instalar_Sistema_FONTES.bat`
2. Siga as instru√ß√µes na tela
3. O sistema ser√° instalado automaticamente

### OP√á√ÉO 2: Execu√ß√£o Direta
1. Execute: `FONTES_Sistema_INSS.exe`
2. O sistema abrir√° diretamente

## üë§ CREDENCIAIS PADR√ÉO
- **Usu√°rio:** admin
- **Senha:** admin123

## üìã REQUISITOS
- Windows 7 ou superior
- 4GB RAM m√≠nimo
- 500MB espa√ßo livre

## üÜò SUPORTE
- Email: suporte@fontes.inss.gov.br
- Telefone: (11) 99999-9999

## üìÑ LICEN√áA
¬© 2025 Sistema FONTES. Todos os direitos reservados.
"""
        
        with open(dist_package_dir / "LEIA-ME.txt", "w", encoding="utf-8") as f:
            f.write(readme_content)
        
        print(f"‚úÖ Pacote criado em: {dist_package_dir}")
        return dist_package_dir
    
    def run(self):
        """Executar processo completo de constru√ß√£o"""
        print("üèõÔ∏è Sistema FONTES - Gerador de Execut√°vel")
        print("=" * 50)
        
        try:
            # 1. Verificar depend√™ncias
            self.check_dependencies()
            
            # 2. Criar arquivos necess√°rios
            self.create_main_launcher()
            self.create_spec_file()
            self.create_version_info()
            self.create_installer_script()
            
            # 3. Construir execut√°vel
            if self.build_executable():
                # 4. Criar pacote de distribui√ß√£o
                package_dir = self.create_distribution_package()
                
                print("\n" + "=" * 50)
                print("üéâ SUCESSO! Execut√°vel criado com sucesso!")
                print("=" * 50)
                print(f"üìÅ Localiza√ß√£o: {package_dir}")
                print("üìã Arquivos criados:")
                print("   ‚Ä¢ FONTES_Sistema_INSS.exe")
                print("   ‚Ä¢ Instalar_Sistema_FONTES.bat")
                print("   ‚Ä¢ LEIA-ME.txt")
                print("\nüöÄ PR√ìXIMOS PASSOS:")
                print("1. Teste o execut√°vel localmente")
                print("2. Distribua a pasta 'FONTES_Distribuicao'")
                print("3. Instrua os usu√°rios a executar 'Instalar_Sistema_FONTES.bat'")
                print("\n‚úÖ Pronto para distribui√ß√£o!")
                
                return True
            else:
                print("‚ùå Falha na cria√ß√£o do execut√°vel")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico: {e}")
            return False

if __name__ == "__main__":
    builder = ExecutableBuilder()
    success = builder.run()
    
    if success:
        input("\nPressione Enter para sair...")
    else:
        input("\nOcorreram erros. Pressione Enter para sair...")
